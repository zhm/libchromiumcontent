#!/usr/bin/env python

import contextlib
import errno
import os
import shutil
import subprocess
import sys
import zipfile


SOURCE_ROOT = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
DIST_DIR = os.path.join(SOURCE_ROOT, 'dist')
SRC_DIR = os.path.join(SOURCE_ROOT, 'vendor', 'chromium', 'src')
OUT_DIR = os.path.join(SRC_DIR, 'out')
SYMBOLS_INTERMEDIATE_DIR = os.path.join(OUT_DIR, 'symbols')
DSYM_DYLIB_PATH = os.path.join('libchromiumcontent.dylib.dSYM', 'Contents',
                               'Resources', 'DWARF',
                               'libchromiumcontent.dylib')

# Almost everything goes into the main zip file...
MAIN_DIR = os.path.join(DIST_DIR, 'main')
DIST_SRC_DIR = os.path.join(MAIN_DIR, 'src')
# ...except symbols, which are so huge we want to be able to download them
# separately.
SYMBOLS_DIR = os.path.join(DIST_DIR, 'symbols')

TARGET_PLATFORM = {
    'cygwin': 'win32',
    'darwin': 'darwin',
    'linux2': 'linux',
    'win32': 'win32',
}[sys.platform]

CONFIGURATIONS = ['Debug', 'Release']
BINARIES = {
    'all': [
        'content_shell.pak',
    ],
    'darwin': [
        'ffmpegsumo.so',
        'libchromiumcontent.dylib',
        'libtest_support_chromiumcontent.a',
    ],
    'linux': [
        'chrome_sandbox',
        'libffmpegsumo.so',
        os.path.join('lib', 'libchromiumcontent.so'),
        'libencryptor.a',
        'libtest_support_chromiumcontent.a',
    ],
    'win32': [
        'chromiumcontent.dll',
        'chromiumcontent.dll.lib',
        'chromiumviews.lib',
        'ffmpegsumo.dll',
        'icudt.dll',
        'libEGL.dll',
        'libGLESv2.dll',
        'test_support_chromiumcontent.lib',
        os.path.join('obj', 'base', 'base_static.lib'),
        os.path.join('obj', 'base', 'base_static.pdb'),
        os.path.join('obj', 'base', 'test_support_base.pdb'),
        os.path.join('obj', 'components', 'encryptor.lib'),
        os.path.join('obj', 'components', 'encryptor.pdb'),
        os.path.join('obj', 'content', 'test_support_content.pdb'),
        os.path.join('obj', 'net', 'net_test_support.pdb'),
        os.path.join('obj', 'sandbox', 'sandbox_static.lib'),
        os.path.join('obj', 'sandbox', 'sandbox_static.pdb'),
        os.path.join('obj', 'testing', 'gtest.pdb'),
        os.path.join('obj', 'third_party', 'iaccessible2', 'iaccessible2.pdb'),
        os.path.join('obj', 'third_party', 'libxml', 'libxml.pdb'),
        os.path.join('obj', 'third_party', 'zlib', 'zlib.pdb'),
        os.path.join('obj', 'ui', 'compositor', 'compositor.pdb'),
        os.path.join('obj', 'ui', 'views', 'controls', 'webview', 'webview.pdb'),
        os.path.join('obj', 'ui', 'web_dialogs', 'web_dialogs.pdb'),
    ],
}

SYMBOLS = {
    'darwin': [
        # OS X has a more complicated symbol creation process. See
        # create_dsym() and copy_symbols().
    ],
    'linux': [
        'chrome_sandbox.dbg',
        'libchromiumcontent.so.dbg',
        'libffmpegsumo.so.dbg',
        'libencryptor.a.dbg',
        'libtest_support_chromiumcontent.a.dbg',
    ],
    'win32': [
        'ffmpegsumo.dll.pdb',
        'chromiumcontent.dll.pdb',
        'libGLESv2.dll.pdb',
    ],
}

# Emperically determined to be required by client apps.
INCLUDE_DIRS = [
    'base',
    'build',
    'cc',
    'components/webdata/encryptor',
    'content/public',
    'ipc',
    'gpu',
    'net',
    'sandbox',
    'skia/ext',
    'testing',
    'third_party/WebKit/Source/Platform/chromium/public',
    'third_party/WebKit/Source/WebKit/chromium/public',
    'third_party/WebKit/public',
    'third_party/icu/source',
    'third_party/skia/include',
    'third_party/skia/src/ports',
    'third_party/wtl/include',
    'ui',
    'url',
    'v8/include',
    'webkit',
]
OTHER_HEADERS = [
    'content/common/content_export.h',
]
OTHER_SOURCES = [
    'content/app/startup_helper_win.cc',
]


def main():
    rm_rf(DIST_DIR)
    os.makedirs(DIST_DIR)

    copy_binaries()
    objcopy_with_debug_info()
    create_dsym()
    copy_symbols()
    copy_sources()
    create_zip()


def copy_binaries():
    for config in CONFIGURATIONS:
        config_dir = os.path.join(MAIN_DIR, config)
        mkdir_p(config_dir)

        for binary in BINARIES['all'] + BINARIES[TARGET_PLATFORM]:
            shutil.copy2(os.path.join(OUT_DIR, config, binary), config_dir)

        # Strip the copied binaries on Linux since they contain quite large
        # debug info.
        if TARGET_PLATFORM == 'linux':
            for binary in BINARIES[TARGET_PLATFORM]:
                binary_path = os.path.join(config_dir, os.path.basename(binary))
                subprocess.check_call(['strip', binary_path])


def create_dsym():
    if sys.platform != 'darwin':
        return

    # FIXME: We should probably do this as part of the build, not as part of
    # create-dist.

    source = os.path.join(OUT_DIR, 'Release', DSYM_DYLIB_PATH)
    destination = os.path.join(SYMBOLS_INTERMEDIATE_DIR, DSYM_DYLIB_PATH)

    if is_newer(destination, source):
        return

    print "Creating dSYM..."
    mkdir_p(SYMBOLS_INTERMEDIATE_DIR)
    destination_dsym = os.path.join(SYMBOLS_INTERMEDIATE_DIR,
                                    'libchromiumcontent.dylib.dSYM')
    rm_rf(destination_dsym)
    subprocess.check_call(['dsymutil', source, '-o', destination_dsym])


def objcopy_with_debug_info():
    if TARGET_PLATFORM != 'linux':
        return

    for config in CONFIGURATIONS:
        for binary in BINARIES[TARGET_PLATFORM]:
            source = os.path.join(OUT_DIR, config, binary)
            destination = os.path.join(OUT_DIR, config,
                                       os.path.basename(binary) + ".dbg")
            safe_unlink(destination)
            subprocess.check_call(['objcopy', '--only-keep-debug', source,
                                   destination])


def copy_symbols():
    for config in CONFIGURATIONS:
        config_dir = os.path.join(SYMBOLS_DIR, config)
        mkdir_p(config_dir)

        for path in SYMBOLS[TARGET_PLATFORM]:
            shutil.copy2(os.path.join(OUT_DIR, config, path), config_dir)

    if sys.platform != 'darwin':
        return

    dsym = os.path.join(SYMBOLS_INTERMEDIATE_DIR,
                        'libchromiumcontent.dylib.dSYM')
    destination = os.path.join(SYMBOLS_DIR, 'Release', os.path.basename(dsym))
    rm_rf(destination)
    mkdir_p(os.path.basename(destination))
    shutil.copytree(dsym, destination)


def copy_sources():
    for include_path in INCLUDE_DIRS:
        abs_path = os.path.join(SRC_DIR, include_path)
        for dirpath, dirnames, filenames in os.walk(abs_path):
            for filename in filenames:
                if os.path.splitext(filename)[1] != '.h':
                    continue
                copy_source_file(os.path.join(dirpath, filename))

    for path in OTHER_HEADERS + OTHER_SOURCES:
        copy_source_file(os.path.join(SRC_DIR, path))

    # Some headers assume this file is at the top of the include path. Rather
    # than forcing client apps to set up their include path specially, we'll
    # just copy it to the top.
    sk_user_config = os.path.join(SRC_DIR, 'third_party', 'skia', 'include',
                                  'config', 'SkUserConfig.h')
    shutil.copy2(sk_user_config, DIST_SRC_DIR)


def copy_source_file(source):
    relative = os.path.relpath(source, start=SRC_DIR)
    destination = os.path.join(DIST_SRC_DIR, relative)
    mkdir_p(os.path.dirname(destination))
    shutil.copy2(source, destination)


def create_zip():
    print "Zipping distribution..."
    zip_file = os.path.join(SOURCE_ROOT, 'libchromiumcontent.zip')
    safe_unlink(zip_file)
    zip_directory(MAIN_DIR, zip_file)

    symbols_zip_file = os.path.join(SOURCE_ROOT,
                                    'libchromiumcontent-symbols.zip')

    if sys.platform == 'darwin':
        # Since it takes so long to zip symbols, first see if symbols have changed
        # since last time.
        dsym_dylib = os.path.join(SYMBOLS_DIR, 'Release', DSYM_DYLIB_PATH)
        if is_newer(symbols_zip_file, dsym_dylib):
            return

    safe_unlink(symbols_zip_file)
    zip_directory(SYMBOLS_DIR, symbols_zip_file)


def zip_directory(root_directory, destination):
  with contextlib.closing(zipfile.ZipFile(destination, mode='w', compression=zipfile.ZIP_DEFLATED)) as z:
      for dirpath, dirnames, filenames in os.walk(root_directory):
          for filename in filenames:
              path = os.path.join(dirpath, filename)
              z.write(path, arcname=os.path.relpath(path, root_directory))


def mkdir_p(path):
    try:
        os.makedirs(path)
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise


def rm_rf(path):
    try:
        shutil.rmtree(path)
    except OSError as e:
        if e.errno != errno.ENOENT:
            raise


def safe_unlink(path):
    try:
        os.unlink(path)
    except OSError as e:
        if e.errno != errno.ENOENT:
            raise


def is_newer(destination, source):
    return os.path.exists(destination) and \
        os.path.getmtime(destination) > os.path.getmtime(source)


if __name__ == '__main__':
    sys.exit(main())
