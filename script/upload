#!/usr/bin/env python

import errno
import glob
import os
import subprocess
import sys


SOURCE_ROOT = os.path.abspath(os.path.dirname(os.path.dirname(__file__)))
S3PUT = {
    'win32': [sys.executable, os.path.join(os.path.dirname(sys.executable),
                                           'Scripts', 's3put')],
}.get(sys.platform, ['s3put'])

PLATFORM_KEY = {
    'cygwin': 'win',
    'darwin': 'osx',
    'linux2': 'linux',
    'win32': 'win',
}[sys.platform]


def main():
    try:
        ensure_s3put()
        upload()
        clean_up()
    except AssertionError as e:
        return e.message


def ensure_s3put():
    if sys.platform == 'linux2':
        return

    output = ''
    try:
        output = command_output(S3PUT + ['--help'])
    except OSError as e:
        if e.errno != errno.ENOENT:
            raise
    assert 'multipart' in output, 'Error: Please install boto and filechunkio'

    if sys.platform != 'win32':
        return
    # multiprocessing on Windows requires that __main__ be discoverable via
    # imp.find_module(), which means it needs to end in a .py extension.
    import tempfile
    with tempfile.NamedTemporaryFile(suffix='.py', delete=False) as temp:
        with open(S3PUT[1]) as f:
            temp.write(f.read())
        S3PUT[1] = temp.name


def upload():
    os.chdir(SOURCE_ROOT)
    bucket, access_key, secret_key = s3_config()
    commit = command_output(['git', 'rev-parse', 'HEAD']).strip()

    args = S3PUT + [
        '--bucket', bucket,
        '--access_key', access_key,
        '--secret_key', secret_key,
        '--prefix', SOURCE_ROOT,
        '--key_prefix', 'libchromiumcontent/{0}/{1}'.format(PLATFORM_KEY, commit),
        '--grant', 'public-read',
    ] + glob.glob('libchromiumcontent*.zip')

    print ' '.join(args)
    subprocess.check_call(args)


def s3_config():
    config = (os.environ.get('LIBCHROMIUMCONTENT_S3_BUCKET', ''),
              os.environ.get('LIBCHROMIUMCONTENT_S3_ACCESS_KEY', ''),
              os.environ.get('LIBCHROMIUMCONTENT_S3_SECRET_KEY', ''))
    message = ('Error: Please set the $LIBCHROMIUMCONTENT_S3_BUCKET, '
               '$LIBCHROMIUMCONTENT_S3_ACCESS_KEY, and '
               '$LIBCHROMIUMCONTENT_S3_SECRET_KEY environment variables')
    assert all(len(c) for c in config), message
    return config


def command_output(args):
    process = subprocess.Popen(args, stdout=subprocess.PIPE)
    output = process.communicate()[0]
    if process.returncode != 0:
        raise subprocess.CalledProcessError(process.returncode, args)
    return output


def clean_up():
    if sys.platform != 'win32':
        return

    # Clean up the temporary file we created in ensure_s3put().
    os.unlink(S3PUT[1])


if __name__ == '__main__':
    sys.exit(main())
