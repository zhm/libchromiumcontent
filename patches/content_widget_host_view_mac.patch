Index: content/browser/renderer_host/render_widget_host_view_mac.mm
===================================================================
--- content/browser/renderer_host/render_widget_host_view_mac.mm	(revision 235101)
+++ content/browser/renderer_host/render_widget_host_view_mac.mm	(working copy)
@@ -2022,6 +2022,18 @@
 }
 
 - (BOOL)acceptsFirstMouse:(NSEvent*)theEvent {
+  const SEL selector = @selector(acceptsFirstMouse:);
+  if ([self.window.delegate respondsToSelector:selector]) {
+    NSInvocation* invocation = [NSInvocation
+        invocationWithMethodSignature:[[self.window.delegate class]
+            instanceMethodSignatureForSelector:selector]];
+    [invocation setTarget:self.window.delegate];
+    [invocation setSelector:selector];
+    [invocation invoke];
+    BOOL accept;
+    [invocation getReturnValue:&accept];
+    return accept;
+  }
   return [self acceptsMouseEventsWhenInactive];
 }
 
@@ -2148,6 +2160,7 @@
   if ([[self window] firstResponder] != self)
     return NO;
 
+#if 0
   // If we return |NO| from this function, cocoa will send the key event to
   // the menu and only if the menu does not process the event to |keyDown:|. We
   // want to send the event to a renderer _before_ sending it to the menu, so
@@ -2161,6 +2174,7 @@
     DCHECK(![[NSApp mainMenu] performKeyEquivalent:theEvent]);
     return NO;
   }
+#endif
 
   // Command key combinations are sent via performKeyEquivalent rather than
   // keyDown:. We just forward this on and if WebCore doesn't want to handle
